C51 COMPILER V9.01   MATRIX_KEY                                                            09/15/2021 17:56:43 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MATRIX_KEY
OBJECT MODULE PLACED IN matrix_key.OBJ
COMPILER INVOKED BY: D:\keil_v5\C51\BIN\C51.EXE matrix_key.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*
   2                  矩阵按键控制动态数码管显示值
   3          */
   4          
   5          #include<reg52.h>
   6          
   7          sbit LSA = P2 ^ 2;
   8          sbit LSB = P2 ^ 3;
   9          sbit LSC = P2 ^ 4;
  10          
  11          #define MAT_K P1
  12          
  13          typedef unsigned int u16;
  14          typedef unsigned char u8;
  15          
  16          u16 KEY_VAL;
  17          
  18          // 段码 0~9 和 dp 共10位顺序排列，dp在最末端
  19          u8 code segments[11] = {
  20                  // 0b(dp)gfedcba
  21                  0x3F, // 0 -> 0b00111111 -> 0b0011 = 0x3 0b1111 = 0xf
  22                  0x06, // 1 -> 0b00000110 -> 0b0000 = 0x0 0b0110 = 0x6
  23                  0x5B, // 2 -> 0b01011011 -> 0b0101 = 0x5 0b1011 = 0xb
  24                  0x4F, // 3 -> 0b01001111 -> 0b0100 = 0x4 0b1111 = 0xf
  25                  0x66, // 4 -> 0b01100110 -> 0b0110 = 0x6 0b0110 = 0x6
  26                  0x6D, // 5 -> 0b01101101 -> 0b0110 = 0x6 0b1101 = 0xd
  27                  0x7D, // 6 -> 0b01111101 -> 0b0111 = 0x7 0b1101 = 0xd
  28                  0x07, // 7 -> 0b00000111 -> 0b0000 = 0x0 0b0111 = 0x7
  29                  0x7F, // 8 -> 0b01111111 -> 0b0111 = 0x7 0b1111 = 0xf
  30                  0x6F, // 9 -> 0b01101111 -> 0b0110 = 0x6 0b1111 = 0xf
  31                  0x80  // . -> 0b10000000 -> 0b1000 = 0x8 0b0000 = 0x0
  32          };
  33          
  34          
  35          void delay_matrix_key(u16 t)
  36          {
  37   1              while(t--);
  38   1      }
  39          
  40          // 选择显示位
  41          void choose_LS(u16 ls)
  42          {
  43   1          switch(ls)
  44   1                {
  45   2                    //       0b0cba
  46   2                    // 第1位 0b0111 = 7
  47   2                    case(0): LSA = 1; LSB = 1; LSC = 1; break;
  48   2                    // 第2位 0b0110 = 6
  49   2                    case(1): LSA = 0; LSB = 1; LSC = 1; break;
  50   2                    // 第3位 0b0101 = 5
  51   2                    case(2): LSA = 1; LSB = 0; LSC = 1; break;
  52   2                    // 第4位 0b0100 = 4
  53   2                    case(3): LSA = 0; LSB = 0; LSC = 1; break;
  54   2                    // 第5位 0b0011 = 3
  55   2                    case(4): LSA = 1; LSB = 1; LSC = 0; break;
C51 COMPILER V9.01   MATRIX_KEY                                                            09/15/2021 17:56:43 PAGE 2   

  56   2                    // 第6位 0b0010 = 2
  57   2                    case(5): LSA = 0; LSB = 1; LSC = 0; break;
  58   2                    // 第7位 0b0001 = 1
  59   2                    case(6): LSA = 1; LSB = 0; LSC = 0; break;
  60   2                    // 第8位 0b0000 = 0
  61   2                    case(7): LSA = 0; LSB = 0; LSC = 0; break;
  62   2                }
  63   1      }
  64          
  65          // 控制dp位显示
  66          void display_dp(u16 dp)
  67          {
  68   1          choose_LS(dp);
  69   1          P0 = segments[10];
  70   1          delay_matrix_key(100);
  71   1          P0 = 0x00;
  72   1      }
  73          
  74          /* 大流程之 - 显示动态数码管，由选位和内容控制来配合矩阵按键控制呈现效果
  75          
  76              params:
  77                  u16* Is  需要进行显示的位，有可能多位，所以是数组
  78                  u8*  Ns  对应每一位需要显示的内容
  79                  u16  len 显示位数控制
  80                  u16  dp  小数点显示位置控制
  81          */
  82          void display_digital_tube(u16* Is, u8* Ns, u16 len, u16 dp)
  83          {
  84   1            u16 i;
  85   1            
  86   1            // dp位显示
  87   1            display_dp(dp);
  88   1            
  89   1            for(i=0; i<len;i++)
  90   1            {
  91   2                choose_LS(Is[i]);
  92   2                P0 = segments[Ns[KEY_VAL]];
  93   2                delay_matrix_key(100);
  94   2                // 消隐
  95   2                P0=0x00;
  96   2            }
  97   1      }
  98          
  99          /*
 100              大流程之 - 矩阵按键控制
 101          */
 102          void controll()
 103          {
 104   1      
 105   1          u8 count = 0;
 106   1          
 107   1          // 0x0F = 0b00001111 0b行行行行列列列列 
 108   1          // 0是低电平，所以初始状态是4行为低电平，4列为高电平
 109   1          MAT_K = 0x0F;
 110   1          
 111   1          if(MAT_K!=0x0F)
 112   1          {
 113   2              // 消抖
 114   2              delay_matrix_key(1000);
 115   2              if(MAT_K!=0x0F)
 116   2              {
 117   3                  // 测试列，看那一列变为低电平
C51 COMPILER V9.01   MATRIX_KEY                                                            09/15/2021 17:56:43 PAGE 3   

 118   3                  MAT_K = 0x0F;
 119   3                  switch(MAT_K)
 120   3                  {
 121   4                      // 0b0000 0111 = 0x07 代表是肉眼左->右第一列是低电平
 122   4                      case(0x07): KEY_VAL = 0; break;
 123   4                      // 0b0000 1011 = 0x0B 代表是第二列低电平
 124   4                      case(0x0B): KEY_VAL = 1; break;
 125   4                      // 0b0000 1101 = 0x0D 代表是第三列低电平
 126   4                      case(0x0D): KEY_VAL = 2; break;
 127   4                      // 0b0000 1110 = 0x0E 代表是第四列低电平
 128   4                      case(0x0E): KEY_VAL = 3; break;
 129   4                  }
 130   3                  // 测试行
 131   3                  MAT_K = 0xF0;
 132   3                  switch(MAT_K)
 133   3                  {
 134   4                      // 0b1110 0000 = 0xE0 代表是肉眼下->上第一行是低电平
 135   4                      case(0xE0): KEY_VAL += 0; break;
 136   4                      // 0b1101 0000 = 0xD0 代表是第二行低电平
 137   4                      case(0xD0): KEY_VAL += 4; break;
 138   4                      // 0b1011 0000 = 0xB0 代表是第三行低电平
 139   4                      case(0xB0): KEY_VAL += 8; break;
 140   4                      // 0b0111 0000 = 0x70 代表是第四行低电平
 141   4                      case(0x70): KEY_VAL += 12; break;
 142   4                  } 
 143   3              }
 144   2          }
 145   1      }
 146          
 147          void matrix_action()
 148          {
 149   1      
 150   1          // 需要显示的位
 151   1          u16 code locs[1] = {7};
 152   1          // 对应位需要显示的内容
 153   1          u8 code disps[8] = {2, 0, 1, 8, 0, 8, 2, 2};
 154   1          // 防止溢出，导致显示错误，以少的控制显示位数
 155   1          u16 len = (sizeof(disps) / sizeof(u8)) > (sizeof(locs) / sizeof(u16)) ? (sizeof(locs) / sizeof(u16)) :
             - (sizeof(disps) / sizeof(u8));
 156   1          // 小数点显示位置控制，只需要一个位置显示
 157   1          u16 dp = KEY_VAL;
 158   1      
 159   1          while(1)
 160   1          {
 161   2              controll();
 162   2              display_digital_tube(locs, disps, len, KEY_VAL);
 163   2          }
 164   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    370    ----
   CONSTANT SIZE    =     21    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      17
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
